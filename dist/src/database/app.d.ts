import { SQLDataSource } from "datasource-sql";
import { AttendeeInput } from "../resolvers-types";
import { AreaEntity, AreaOrderEntity, CalendarEntity, ComponentEntity, ComponentOrderEntity, EventEntity, FeatureEntity, ItemEntity, ItemOrderEntity, LabelEntity, ProjectEntity, ProjectOrderEntity, ReminderEntity, ViewEntity, ViewOrderEntity, WeeklyGoalEntity } from "./types";
declare class AppDatabase extends SQLDataSource {
    getViewOrders(): Promise<ViewOrderEntity[]>;
    getViewOrder(viewKey: string): Promise<ViewOrderEntity>;
    createViewOrder(viewKey: string): Promise<ViewOrderEntity>;
    setViewOrder(key: string, newSortOrder: number): Promise<ViewOrderEntity>;
    getViews(): Promise<ViewEntity[]>;
    getView(key: string): Promise<ViewEntity>;
    createView(key: string, name: string, icon: string, type: string): Promise<ViewEntity>;
    deleteView(key: string): Promise<ViewEntity>;
    renameView(key: string, name: string): Promise<ViewEntity>;
    getProjectOrders(): Promise<ProjectOrderEntity[]>;
    getProjectOrder(projectKey: string): Promise<ProjectOrderEntity>;
    createProjectOrder(projectKey: string): Promise<ProjectOrderEntity>;
    setProjectOrder(key: string, newSortOrder: number): Promise<ProjectOrderEntity>;
    getProjects(): Promise<ProjectEntity[]>;
    getProject(key: string): Promise<ProjectEntity>;
    getProjectsByArea(areaKey: string): Promise<ProjectEntity[]>;
    createProject(key: string, name: string, description: string, areaKey?: string): Promise<ProjectEntity>;
    deleteProject(key: string): Promise<ProjectEntity>;
    renameProject(key: string, name: string): Promise<ProjectEntity>;
    setDescriptionOfProject(key: string, description: string): Promise<ProjectEntity>;
    setEndDateOfProject(key: string, endAt: Date): Promise<ProjectEntity>;
    setStartDateOfProject(key: string, startAt: Date): Promise<ProjectEntity>;
    setEmojiOfProject(key: string, emoji: string): Promise<ProjectEntity>;
    setAreaOfProject(key: string, areaKey: string): Promise<ProjectEntity>;
    getAreaOrders(): Promise<AreaOrderEntity[]>;
    getAreaOrder(areaKey: string): Promise<AreaOrderEntity>;
    createAreaOrder(areaKey: string): Promise<AreaOrderEntity>;
    setAreaOrder(key: string, newSortOrder: number): Promise<AreaOrderEntity>;
    getAreas(): Promise<AreaEntity[]>;
    getArea(key: string): Promise<AreaEntity>;
    createArea(key: string, name: string, description: string): Promise<AreaEntity>;
    deleteArea(key: string): Promise<AreaEntity>;
    renameArea(key: string, name: string): Promise<AreaEntity>;
    setDescriptionOfArea(key: string, description: string): Promise<AreaEntity>;
    setEmojiOfArea(key: string, emoji: string): Promise<AreaEntity>;
    getItemOrders(): Promise<ItemOrderEntity[]>;
    getItemOrder(itemKey: string, componentKey: string): Promise<ItemOrderEntity>;
    getItemOrdersByItem(itemKey: string): Promise<ItemOrderEntity[]>;
    getItemOrdersByComponent(componentKey: string): Promise<ItemOrderEntity[]>;
    createItemOrder(itemKey: string, componentKey: string): Promise<ItemOrderEntity>;
    bulkCreateItemOrders(itemOrders: string[], componentKey: string): Promise<ItemOrderEntity[]>;
    setItemOrder(itemKey: string, componentKey: string, newSortOrder: number): Promise<ItemOrderEntity>;
    deleteItemOrders(itemKeys: string[], componentKey: string): Promise<number>;
    deleteItemOrder(itemKey: string, componentKey: string): Promise<number>;
    deleteItemOrdersByComponent(componentKey: string): Promise<string>;
    getItems(): Promise<ItemEntity[]>;
    getItem(key: string): Promise<ItemEntity>;
    getItemsByProject(projectKey: string): Promise<ItemEntity[]>;
    getItemsByArea(areaKey: string): Promise<ItemEntity[]>;
    getItemsByParent(parentKey: string): Promise<ItemEntity[]>;
    getItemsByFilter(filter: string, componentKey: string): Promise<ItemEntity[]>;
    createItem(key: string, projectKey: string, repeat: string, text: string, type: string, labelKey?: string | null, parentKey?: string | null, dueAt?: Date | null, scheduledAt?: Date | null): Promise<ItemEntity>;
    deleteItem(key: string): Promise<ItemEntity>;
    restoreItem(key: string): Promise<ItemEntity>;
    renameItem(key: string, text: string): Promise<ItemEntity>;
    snoozeItem(key: string, snoozeUntil: Date): Promise<ItemEntity>;
    completeItem(key: string): Promise<ItemEntity>;
    unCompleteItem(key: string): Promise<ItemEntity>;
    setRepeatOfItem(key: string, repeat: string): Promise<ItemEntity>;
    setProjectOfItem(key: string, projectKey: string): Promise<ItemEntity>;
    setAreaOfItem(key: string, areaKey: string): Promise<ItemEntity>;
    setScheduledAtOfItem(key: string, scheduledAt: Date | null): Promise<ItemEntity>;
    setDueAtOfItem(key: string, dueAt: Date | null): Promise<ItemEntity>;
    cloneItem(key: string): Promise<ItemEntity>;
    setParentOfItem(key: string, parentKey: string): Promise<ItemEntity>;
    permanentDeleteItem(key: string): Promise<string>;
    setLabelOfItem(key: string, labelKey: string): Promise<ItemEntity>;
    getFeatures(): Promise<FeatureEntity[]>;
    getFeature(key: string): Promise<FeatureEntity>;
    getFeatureByName(name: string): Promise<FeatureEntity>;
    setFeature(key: string, enabled: boolean): Promise<FeatureEntity>;
    setFeatureMetadata(key: string, metadata: Record<string, unknown>): Promise<FeatureEntity>;
    createFeature(key: string, name: string, enabled: boolean, metadata: Record<string, unknown>): Promise<FeatureEntity>;
    getLabels(): Promise<LabelEntity[]>;
    getLabel(key: string): Promise<LabelEntity>;
    createLabel(key: string, name: string, colour: string): Promise<LabelEntity>;
    renameLabel(key: string, name: string): Promise<LabelEntity>;
    setColourOfLabel(key: string, colour: string): Promise<LabelEntity>;
    deleteLabel(key: string): Promise<string>;
    getReminders(): Promise<ReminderEntity[]>;
    getReminder(key: string): Promise<ReminderEntity>;
    getRemindersByItem(itemKey: string): Promise<ReminderEntity[]>;
    createReminder(key: string, text: string, remindAt: Date, itemKey: string): Promise<ReminderEntity>;
    deleteReminder(key: string): Promise<ReminderEntity>;
    deleteReminderFromItem(itemKey: string): Promise<ReminderEntity>;
    getComponents(): Promise<ComponentEntity[]>;
    getComponent(key: string): Promise<ComponentEntity>;
    getComponentsByView(viewKey: string): Promise<ComponentEntity[]>;
    createComponent(key: string, viewKey: string, location: string, type: string, parameters: Record<string, any>): Promise<ComponentEntity>;
    cloneComponent(key: string): Promise<ComponentEntity>;
    deleteComponent(key: string): Promise<string>;
    setParametersOfComponent(key: string, parameters: Record<string, any>): Promise<ComponentEntity>;
    updateComponentOnProjectNameChange(viewKey: string, name: string): Promise<void>;
    getComponentOrders(): Promise<ComponentOrderEntity[]>;
    getComponentOrder(componentKey: string): Promise<ComponentOrderEntity>;
    createComponentOrder(componentKey: string): Promise<ComponentOrderEntity>;
    setComponentOrder(componentKey: string, newSortOrder: number): Promise<ComponentOrderEntity>;
    getCalendars(): Promise<CalendarEntity[]>;
    getCalendar(key: string): Promise<CalendarEntity>;
    getActiveCalendar(): Promise<CalendarEntity>;
    createCalendar(key: string, name: string, active: boolean): Promise<CalendarEntity>;
    deleteCalendars(): Promise<void>;
    setActiveCalendar(key: string): Promise<CalendarEntity>;
    getEvents(): Promise<EventEntity[]>;
    getEvent(key: string): Promise<EventEntity>;
    getEventsByCalendar(calendarKey: string): Promise<EventEntity[]>;
    getEventsForActiveCalendar(): Promise<EventEntity[] | null>;
    createEvent(key: string, title: string, description: string, startAt: Date, endAt: Date, allDay: boolean, calendarKey: string, location: string, attendees: AttendeeInput[] | null, recurrence: string): Promise<EventEntity>;
    deleteEvent(key: string): Promise<string>;
    getWeeklyGoals(): Promise<WeeklyGoalEntity[]>;
    getWeeklyGoal(key: string): Promise<WeeklyGoalEntity>;
    getWeeklyGoalByName(name: string): Promise<WeeklyGoalEntity>;
    createWeeklyGoal(key: string, week: string, goal: string): Promise<WeeklyGoalEntity>;
}
export default AppDatabase;
