/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(global["webpackChunkrenderer"] = global["webpackChunkrenderer"] || []).push([["node_modules_json-to-pretty-yaml_index_js"],{

/***/ "./node_modules/json-to-pretty-yaml/index.js":
/*!***************************************************!*\
  !*** ./node_modules/json-to-pretty-yaml/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("(function() {\n    \"use strict\";\n\n    var typeOf = (__webpack_require__(/*! remedial */ \"./node_modules/remedial/index.js\").typeOf);\n    var trimWhitespace = __webpack_require__(/*! remove-trailing-spaces */ \"./node_modules/remove-trailing-spaces/lib/index.js\");\n\n    function stringify(data) {\n        var handlers, indentLevel = '';\n\n        handlers = {\n            \"undefined\": function() {\n                // objects will not have `undefined` converted to `null`\n                // as this may have unintended consequences\n                // For arrays, however, this behavior seems appropriate\n                return 'null';\n            },\n            \"null\": function() {\n                return 'null';\n            },\n            \"number\": function(x) {\n                return x;\n            },\n            \"boolean\": function(x) {\n                return x ? 'true' : 'false';\n            },\n            \"string\": function(x) {\n                // to avoid the string \"true\" being confused with the\n                // the literal `true`, we always wrap strings in quotes\n                return JSON.stringify(x);\n            },\n            \"array\": function(x) {\n                var output = '';\n\n                if (0 === x.length) {\n                    output += '[]';\n                    return output;\n                }\n\n                indentLevel = indentLevel.replace(/$/, '  ');\n                x.forEach(function(y, i) {\n                    // TODO how should `undefined` be handled?\n                    var handler = handlers[typeOf(y)];\n\n                    if (!handler) {\n                        throw new Error('what the crap: ' + typeOf(y));\n                    }\n\n                    output += '\\n' + indentLevel + '- ' + handler(y, true);\n\n                });\n                indentLevel = indentLevel.replace(/  /, '');\n\n                return output;\n            },\n            \"object\": function(x, inArray, rootNode) {\n                var output = '';\n\n                if (0 === Object.keys(x).length) {\n                    output += '{}';\n                    return output;\n                }\n\n                if (!rootNode) {\n                    indentLevel = indentLevel.replace(/$/, '  ');\n                }\n\n                Object.keys(x).forEach(function(k, i) {\n                    var val = x[k],\n                        handler = handlers[typeOf(val)];\n\n                    if ('undefined' === typeof val) {\n                        // the user should do\n                        // delete obj.key\n                        // and not\n                        // obj.key = undefined\n                        // but we'll error on the side of caution\n                        return;\n                    }\n\n                    if (!handler) {\n                        throw new Error('what the crap: ' + typeOf(val));\n                    }\n\n                    if (!(inArray && i === 0)) {\n                        output += '\\n' + indentLevel;\n                    }\n\n                    output += k + ': ' + handler(val);\n                });\n                indentLevel = indentLevel.replace(/  /, '');\n\n                return output;\n            },\n            \"function\": function() {\n                // TODO this should throw or otherwise be ignored\n                return '[object Function]';\n            }\n        };\n\n        return trimWhitespace(handlers[typeOf(data)](data, true, true) + '\\n');\n    }\n\n    module.exports.stringify = stringify;\n}());\n\n\n//# sourceURL=webpack://renderer/./node_modules/json-to-pretty-yaml/index.js?");

/***/ }),

/***/ "./node_modules/remedial/index.js":
/*!****************************************!*\
  !*** ./node_modules/remedial/index.js ***!
  \****************************************/
/***/ ((module) => {

eval("/*jslint onevar: true, undef: true, nomen: true, eqeqeq: true, plusplus: true, bitwise: true, regexp: true, newcap: true, immed: true */\n(function () {\n    \"use strict\";\n\n    var global = Function('return this')()\n      , classes = \"Boolean Number String Function Array Date RegExp Object\".split(\" \")\n      , i\n      , name\n      , class2type = {}\n      ;\n\n    for (i in classes) {\n      if (classes.hasOwnProperty(i)) {\n        name = classes[i];\n        class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\n      }\n    }\n\n    function typeOf(obj) {\n      return (null === obj || undefined === obj) ? String(obj) : class2type[Object.prototype.toString.call(obj)] || \"object\";\n    }\n\n    function isEmpty(o) {\n        var i, v;\n        if (typeOf(o) === 'object') {\n            for (i in o) { // fails jslint\n                v = o[i];\n                if (v !== undefined && typeOf(v) !== 'function') {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    if (!String.prototype.entityify) {\n        String.prototype.entityify = function () {\n            return this.replace(/&/g, \"&amp;\").replace(/</g,\n                \"&lt;\").replace(/>/g, \"&gt;\");\n        };\n    }\n\n    if (!String.prototype.quote) {\n        String.prototype.quote = function () {\n            var c, i, l = this.length, o = '\"';\n            for (i = 0; i < l; i += 1) {\n                c = this.charAt(i);\n                if (c >= ' ') {\n                    if (c === '\\\\' || c === '\"') {\n                        o += '\\\\';\n                    }\n                    o += c;\n                } else {\n                    switch (c) {\n                    case '\\b':\n                        o += '\\\\b';\n                        break;\n                    case '\\f':\n                        o += '\\\\f';\n                        break;\n                    case '\\n':\n                        o += '\\\\n';\n                        break;\n                    case '\\r':\n                        o += '\\\\r';\n                        break;\n                    case '\\t':\n                        o += '\\\\t';\n                        break;\n                    default:\n                        c = c.charCodeAt();\n                        o += '\\\\u00' + Math.floor(c / 16).toString(16) +\n                            (c % 16).toString(16);\n                    }\n                }\n            }\n            return o + '\"';\n        };\n    } \n\n    if (!String.prototype.supplant) {\n        String.prototype.supplant = function (o) {\n            return this.replace(/{([^{}]*)}/g,\n                function (a, b) {\n                    var r = o[b];\n                    return typeof r === 'string' || typeof r === 'number' ? r : a;\n                }\n            );\n        };\n    }\n\n    if (!String.prototype.trim) {\n        String.prototype.trim = function () {\n            return this.replace(/^\\s*(\\S*(?:\\s+\\S+)*)\\s*$/, \"$1\");\n        };\n    }\n\n    // CommonJS / npm / Ender.JS\n    module.exports = {\n        typeOf: typeOf,\n        isEmpty: isEmpty\n    };\n    global.typeOf = global.typeOf || typeOf;\n    global.isEmpty = global.isEmpty || isEmpty;\n}());\n\n\n//# sourceURL=webpack://renderer/./node_modules/remedial/index.js?");

/***/ }),

/***/ "./node_modules/remove-trailing-spaces/lib/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/remove-trailing-spaces/lib/index.js ***!
  \**********************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * removeTrailingSpaces\n * Remove the trailing spaces from a string.\n *\n * @name removeTrailingSpaces\n * @function\n * @param {String} input The input string.\n * @returns {String} The output string.\n */\n\nmodule.exports = function removeTrailingSpaces(input) {\n  // TODO If possible, use a regex\n  return input.split(\"\\n\").map(function (x) {\n    return x.trimRight();\n  }).join(\"\\n\");\n};\n\n//# sourceURL=webpack://renderer/./node_modules/remove-trailing-spaces/lib/index.js?");

/***/ })

}]);